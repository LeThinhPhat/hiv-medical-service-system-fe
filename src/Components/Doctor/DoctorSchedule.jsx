import React, { useEffect, useState } from "react";
import doctorScheduleService from "../../services/DoctorService/doctorScheduleService";
import moment from "moment";

const DoctorSchedule = () => {
  const [schedule, setSchedule] = useState([]);
  const [selectedShifts, setSelectedShifts] = useState({});
  const [currentMonday, setCurrentMonday] = useState(getMonday(new Date()));
  const token = localStorage.getItem("token");

  // üëâ H√†m l·∫•y th·ª© 2 ƒë·∫ßu tu·∫ßn t·ª´ 1 ng√†y b·∫•t k·ª≥
  function getMonday(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - (day === 0 ? 6 : day - 1);
    return new Date(d.setDate(diff));
  }

  useEffect(() => {
    const fetchSchedule = async () => {
      try {
        if (!token) {
          console.warn("‚ö†Ô∏è Token kh√¥ng t·ªìn t·∫°i!");
          return;
        }

        const monday = new Date(currentMonday);
        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);

        const startDate = monday.toISOString().split("T")[0];
        const endDate = sunday.toISOString().split("T")[0];

        const res = await doctorScheduleService.getScheduleByWeek(
          token,
          startDate,
          endDate
        );
        setSchedule(res.data);
      } catch (err) {
        console.error("Kh√¥ng th·ªÉ t·∫£i l·ªãch l√†m vi·ªác", err);
      }
    };

    fetchSchedule();
  }, [token, currentMonday]);

  const handleConfirmSchedule = async (scheduleId) => {
    const shiftName = selectedShifts[scheduleId] || "morning";
    try {
      const response = await doctorScheduleService.confirmSchedule(
        scheduleId,
        shiftName,
        token
      );
      console.log("‚úÖ X√°c nh·∫≠n th√†nh c√¥ng:", response?.message || response);

      setSchedule((prev) =>
        prev.map((item) =>
          item._id === scheduleId
            ? { ...item, status: "ƒê√£ x√°c nh·∫≠n", isConfirmed: true }
            : item
        )
      );
    } catch (err) {
      console.error("‚ùå L·ªói x√°c nh·∫≠n l·ªãch l√†m vi·ªác:", err);
      alert("X√°c nh·∫≠n th·∫•t b·∫°i.");
    }
  };

  const handleShiftChange = (scheduleId, value) => {
    setSelectedShifts((prev) => ({
      ...prev,
      [scheduleId]: value,
    }));
  };

  const goToPreviousWeek = () => {
    const prevMonday = new Date(currentMonday);
    prevMonday.setDate(prevMonday.getDate() - 7);
    setCurrentMonday(prevMonday);
  };

  const goToNextWeek = () => {
    const nextMonday = new Date(currentMonday);
    nextMonday.setDate(nextMonday.getDate() + 7);
    setCurrentMonday(nextMonday);
  };

  const formatRange = () => {
    const monday = new Date(currentMonday);
    const sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    return `${moment(monday).format("DD/MM")} - ${moment(sunday).format(
      "DD/MM/YYYY"
    )}`;
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-xl font-bold">
          üìÖ L·ªãch l√†m vi·ªác tu·∫ßn: {formatRange()}
        </h1>
        <div className="space-x-2">
          <button
            onClick={goToPreviousWeek}
            className="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300"
          >
            ‚¨ÖÔ∏è Tu·∫ßn tr∆∞·ªõc
          </button>
          <button
            onClick={goToNextWeek}
            className="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300"
          >
            ‚û°Ô∏è Tu·∫ßn sau
          </button>
        </div>
      </div>

      <table className="min-w-full border border-gray-300 rounded-md">
        <thead>
          <tr className="bg-gray-100">
            <th className="p-2 border">Ng√†y</th>
            <th className="p-2 border">Ca tr·ª±c</th>
            <th className="p-2 border">Tr·∫°ng th√°i</th>
            <th className="p-2 border">Ng∆∞·ªùi t·∫°o</th>
            <th className="p-2 border">Ch·ªçn ca</th>
            <th className="p-2 border">X√°c nh·∫≠n</th>
            <th className="p-2 border">ƒê√£ ƒëƒÉng k√Ω</th>
          </tr>
        </thead>
        <tbody>
          {schedule.length > 0 ? (
            schedule.map((item) => (
              <tr key={item._id} className="text-center">
                <td className="p-2 border">
                  {moment(item.date).format("DD/MM/YYYY")}
                </td>
                <td className="p-2 border capitalize">{item.shiftName}</td>
                <td className="p-2 border">{item.status}</td>
                <td className="p-2 border">{item.createdBy?.email}</td>
                <td className="p-2 border">
                  <select
                    className="border px-2 py-1 rounded"
                    value={selectedShifts[item._id] || "morning"}
                    onChange={(e) =>
                      handleShiftChange(item._id, e.target.value)
                    }
                  >
                    <option value="morning">S√°ng</option>
                    <option value="afternoon">Chi·ªÅu</option>
                    <option value="full">C·∫£ ng√†y</option>
                  </select>
                </td>
                <td className="p-2 border">
                  {!item.isConfirmed ? (
                    <button
                      onClick={() => handleConfirmSchedule(item._id)}
                      className="bg-blue-500 text-white px-4 py-1 rounded-md hover:bg-blue-600"
                    >
                      X√°c nh·∫≠n
                    </button>
                  ) : (
                    <span className="text-green-600 font-semibold">
                      ‚úÖ ƒê√£ x√°c nh·∫≠n
                    </span>
                  )}
                </td>
                <td className="p-2 border">
                  {item.shiftName === "morning"
                    ? "Ca s√°ng"
                    : item.shiftName === "afternoon"
                    ? "Ca chi·ªÅu"
                    : "C·∫£ ng√†y"}
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="6" className="p-4 text-center">
                Kh√¥ng c√≥ l·ªãch l√†m vi·ªác n√†o.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default DoctorSchedule;
